[1mdiff --cc proj1/src/threads/synch.c[m
[1mindex 9e49601,6f5843b..0000000[m
mode 100644,100644..100755[m
[1m--- a/proj1/src/threads/synch.c[m
[1m+++ b/proj1/src/threads/synch.c[m
[36m@@@ -32,6 -32,20 +32,20 @@@[m
  #include "threads/interrupt.h"[m
  #include "threads/thread.h"[m
  [m
[32m+ // ADDED ALEXA[m
[32m+ [m
[32m+                               [m
[32m+ bool[m
[32m+ lock_priority_comp (const struct list_elem *a, const struct list_elem *b,[m
[32m+                     void *aux UNUSED)[m
[32m+ {[m
[32m+   const struct lock *lhs = list_entry (a, struct lock, elem);[m
[32m+   const struct lock *rhs = list_entry (b, struct lock, elem);[m
[32m+ [m
[32m+   return lhs->priority >= rhs->priority;[m
[32m+ }[m
[31m -[m
[32m++/* <## */[m
[32m+ [m
  /* Initializes semaphore SEMA to VALUE.  A semaphore is a[m
     nonnegative integer along with two atomic operators for[m
     manipulating it:[m
[36m@@@ -66,9 -80,11 +80,10 @@@[m [msema_down (struct semaphore *sema[m
    ASSERT (!intr_context ());[m
  [m
    old_level = intr_disable ();[m
[31m -  //priority sema[m
    while (sema->value == 0) [m
      {[m
[31m-       list_push_back (&sema->waiters, &thread_current ()->elem);[m
[32m+       //list_push_back (&sema->waiters, &thread_current ()->elem);[m
[32m+       list_insert_ordered (&sema->waiters, &thread_current ()->elem, list_priority_comp, NULL);[m
        thread_block ();[m
      }[m
    sema->value--;[m
[36m@@@ -109,25 -125,23 +124,21 @@@[m [mvoi[m
  sema_up (struct semaphore *sema) [m
  {[m
    enum intr_level old_level;[m
[31m-   ASSERT (sema != NULL);[m
    struct thread *possible = NULL;[m
[32m+   ASSERT (sema != NULL);[m
  [m
    old_level = intr_disable ();[m
[31m-   //ADDED ALEXANDRA[m
[31m-   //comment for Rohan:[m
[31m-   //while instead of if to unblock every waiter so that the highest is sceduled[m
[31m-   //because ready list is sorted by priority (see changes in thread.c in this commit)[m
    while (!list_empty (&sema->waiters)) {[m
[31m-     possible = list_entry (list_pop_front (&sema->waiters),[m
[31m-                                 struct thread, elem);[m
[31m- 	  thread_unblock (possible);[m
[31m-   }[m
[32m+     //thread_unblock (list_entry (list_pop_front (&sema->waiters), struct thread, elem));[m
[32m+     possible = list_entry (list_pop_front (&sema->waiters), struct thread, elem);[m
[32m+     thread_unblock (possible);[m
[32m+     }[m
    sema->value++;[m
[31m-   //if priority is bigger than running thread's priority -> yield[m
[31m-   if (possible != NULL && possible->priority > thread_current ()->priority) {[m
[32m+ [m
[31m -  //if one of the waiters gets unblocked by current thread releasing the lock[m
[31m -  //and its priority is higher than current's thread, current thread should yield[m
[31m -  if (possible && possible->priority > thread_current()->priority)[m
[32m++  if (possible != NULL && possible->priority > thread_current()->priority)[m
        thread_yield();[m
[31m-     }[m
[31m-     intr_set_level (old_level);[m
[32m+ [m
[32m+   intr_set_level (old_level);[m
  }[m
  [m
  static void sema_test_helper (void *sema_);[m
[36m@@@ -205,9 -221,49 +218,41 @@@[m [mlock_acquire (struct lock *lock[m
    ASSERT (lock != NULL);[m
    ASSERT (!intr_context ());[m
    ASSERT (!lock_held_by_current_thread (lock));[m
[31m -[m
[31m -  enum intr_level old_level = intr_disable ();[m
[32m+   [m
[32m++  enum intr_level old_level = intr_disable ();[m
[32m++[m
[32m+   updateAcquire(lock);[m
  [m
    sema_down (&lock->semaphore);[m
[31m-   lock->holder = thread_current ();[m
[32m+   lock->holder = thread_current (); [m
[32m+   thread_current()->wanted = NULL; //now has the lock[m
[32m+   //update our list[m
[32m+   list_insert_ordered (&thread_current()->acquired_locks_list, &lock->elem, lock_priority_comp, NULL);[m
[32m+ [m
[31m -  intr_set_level (old_level); [m
[32m++  intr_set_level (old_level);[m
[32m+  [m
[32m+ }[m
[32m+ [m
[31m -//helper method for lock acquire used when a priority needs to be donated[m
[32m+ void updateAcquire(struct lock *lock) {[m
[32m+   struct thread *newHolder = thread_current ();[m
[32m+   struct thread *lockHolder = lock->holder;[m
[32m+ [m
[31m -// if the lockholder is null the loop won't execute[m
[31m -//because the thread with highest priority can run [m
[31m -//and does not wait on any locks[m
[32m+   if (lockHolder) {[m
[32m+     newHolder->wanted = lock;[m
[31m -    //while the current's thread priority is higher and the highest[m
[31m -    //priority thread wants a lock, the thread that has it will [m
[31m -    //keep updating its priority by calling updatePriority [m
[32m++[m
[32m+     while (newHolder->priority > lockHolder->priority) {[m
[32m+       updatePriority (lockHolder, newHolder->priority);[m
[32m+         [m
[32m+       if (newHolder->priority > lock->priority)[m
[32m+         lock->priority = newHolder->priority;[m
[31m -      [m
[31m -      //while loop ends when the lock holder is not blocked anymore[m
[32m++[m
[32m+       if (!lockHolder->wanted)[m
[32m+         break;[m
[32m+ [m
[31m -        //in case [m
[32m+       lock = lockHolder->wanted;[m
[32m+       lockHolder = lockHolder->wanted->holder;  [m
[32m+     }[m
[32m+   }[m
  }[m
  [m
  /* Tries to acquires LOCK and returns true if successful or false[m
[36m@@@ -240,11 -296,40 +285,34 @@@[m [mlock_release (struct lock *lock[m
  {[m
    ASSERT (lock != NULL);[m
    ASSERT (lock_held_by_current_thread (lock));[m
[31m- [m
[32m+   [m
    lock->holder = NULL;[m
    sema_up (&lock->semaphore);[m
[32m+   updateRelease(lock);[m
[32m+ }[m
[32m+ [m
[31m -//helper method for releasing the lock/ removing it from our data structure[m
[31m -//the reason why we disable interrupts[m
[32m+ void updateRelease(struct lock *lock) {[m
[32m+   enum intr_level old_level = intr_disable ();[m
[31m -  struct thread *oldHolder = thread_current ();[m
[31m -[m
[31m -  lock->priority = 0; //set lock's priority to 0 as it is released [m
[31m -  list_remove (&lock->elem); //remove the lock[m
[32m++  struct thread *currentThread = thread_current ();[m
[32m+   [m
[31m -  //if there are other locks the thread holds[m
[31m -  if (!list_empty (&oldHolder->acquired_locks_list)) {[m
[31m -    //get the lock[m
[31m -    struct lock *e = list_entry (list_begin (&oldHolder->acquired_locks_list), struct lock, elem);[m
[32m++  lock->priority = 0;[m
[32m++  list_remove (&lock->elem);[m
[32m+   [m
[31m -    if (e->priority == 0)   //if the next lock 's priority is 0 no one needs the locks it holds[m
[31m -        thread_set_priority (oldHolder->initial_priority); //thread is back to its initial priority[m
[32m++  if (!list_empty (&currentThread->acquired_locks_list)) {[m
[32m++    struct lock *e = list_entry (list_begin (&currentThread->acquired_locks_list), struct lock, elem);[m
[32m++    if (e->priority == 0)[m
[32m++        thread_set_priority (currentThread->initial_priority);[m
[32m+     else[m
[31m -        updatePriority (oldHolder, e->priority);  //otherwise a thread wants it, and it is donated & updated priority[m
[32m++        updatePriority (currentThread, e->priority);   [m
[32m+   } [m
[32m+   else {[m
[31m -    //if there are no more locks[m
[31m -    oldHolder->update = false; [m
[31m -    thread_set_priority (oldHolder->initial_priority); //thread is back to its initial priority[m
[32m++    currentThread->update = false;[m
[32m++    thread_set_priority (currentThread->initial_priority);[m
[32m+   }[m
[31m -  intr_set_level (old_level);[m
[32m++    intr_set_level (old_level);[m
  }[m
  [m
[32m+ [m
  /* Returns true if the current thread holds LOCK, false[m
     otherwise.  (Note that testing whether some other thread holds[m
     a lock would be racy.) */[m
